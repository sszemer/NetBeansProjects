/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jtwitchbot;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author sebastianszemer
 */
public class JTwitchBotGUI extends javax.swing.JFrame {

    /**
     * Creates new form JTwitchBotGUI
     */
    private String settingsDB = "settings.db";
    public JTwitchBotGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jStatusStaticLabel = new javax.swing.JLabel();
        jStatusLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        channelTextField = new javax.swing.JTextField();
        jEnableTwitterIntegration = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        twitterUsernameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jEnableLastFmIntegrationCheckBox = new javax.swing.JCheckBox();
        jLastFmUsernameTextField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jBanLinks = new javax.swing.JCheckBox();
        jBanCaps = new javax.swing.JCheckBox();
        jBanASCII = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jEnableFollowerNotifications = new javax.swing.JCheckBox();
        jEnableHostingNotifications = new javax.swing.JCheckBox();
        jEnableSubscriberNotifications = new javax.swing.JCheckBox();
        jEnablePatreonSubNotifications = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jEnableAnnouncements = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jEnableCoinsCheckBox = new javax.swing.JCheckBox();
        jEnableRanksCheckBox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jCoinsTimerTextField = new javax.swing.JTextField();
        jDropCoinsWhenOfflineCheckBox = new javax.swing.JCheckBox();
        jAmountOfCoinsToDropWhenOnlineTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jAmountOfCoinsToDropWhenOfflineTextField = new javax.swing.JTextField();
        jAnnounceCoinsCheckBox = new javax.swing.JCheckBox();
        jAnnounceRanksCheckBox = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jCoinsNameTextField = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        helpMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DockingBot");

        jStatusStaticLabel.setText("Status:");

        jStatusLabel.setText("Offline");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jStatusStaticLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jStatusLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jStatusStaticLabel)
                    .addComponent(jStatusLabel)))
        );

        jLabel1.setText("Twitch channel:");

        channelTextField.setToolTipText("twitch channel name");
        channelTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelTextFieldActionPerformed(evt);
            }
        });

        jEnableTwitterIntegration.setText("Enable twitter integration");

        jLabel3.setText("Twitter username:");

        jLabel2.setText("Last.fm username:");

        jEnableLastFmIntegrationCheckBox.setText("Enable Last.fm integration");

        jLastFmUsernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLastFmUsernameTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(channelTextField))
                    .addComponent(jEnableTwitterIntegration)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(twitterUsernameTextField))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLastFmUsernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                    .addComponent(jEnableLastFmIntegrationCheckBox))
                .addGap(0, 557, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(channelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jEnableTwitterIntegration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(twitterUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jEnableLastFmIntegrationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLastFmUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 265, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("General", jPanel3);

        jBanLinks.setText("Ban links");
        jBanLinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBanLinksActionPerformed(evt);
            }
        });

        jBanCaps.setText("Ban caps");

        jBanASCII.setText("Ban ASCII");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBanLinks)
                    .addComponent(jBanCaps)
                    .addComponent(jBanASCII))
                .addGap(0, 703, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jBanLinks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBanCaps)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBanASCII)
                .addGap(0, 338, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Moderation", jPanel4);

        jEnableFollowerNotifications.setText("Enable follower notifications");

        jEnableHostingNotifications.setText("Enable hosting notifications");

        jEnableSubscriberNotifications.setText("Enable Subscriber notifications");

        jEnablePatreonSubNotifications.setText("Enable Patreon subscriber notifications");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jEnableFollowerNotifications)
                    .addComponent(jEnableHostingNotifications)
                    .addComponent(jEnableSubscriberNotifications)
                    .addComponent(jEnablePatreonSubNotifications))
                .addGap(0, 516, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jEnableFollowerNotifications)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jEnableHostingNotifications)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jEnableSubscriberNotifications)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jEnablePatreonSubNotifications)
                .addGap(0, 309, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Notifications", jPanel6);

        jEnableAnnouncements.setText("Enable Announcements");
        jEnableAnnouncements.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jEnableAnnouncementsStateChanged(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jEnableAnnouncements)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jEnableAnnouncements)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Announcements", jPanel7);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 794, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("miscellaneous", jPanel8);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Commands", jPanel9);

        jEnableCoinsCheckBox.setText("Enable coins");

        jEnableRanksCheckBox.setText("Enable ranks");

        jLabel4.setText("Coins timer:");

        jCoinsTimerTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCoinsTimerTextFieldActionPerformed(evt);
            }
        });

        jDropCoinsWhenOfflineCheckBox.setText("Drop coins when stream is offline");

        jLabel5.setText("Amount of coins to drop:");

        jLabel6.setText("Amount of coins when offline:");

        jAnnounceCoinsCheckBox.setText("Announce coins");
        jAnnounceCoinsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAnnounceCoinsCheckBoxActionPerformed(evt);
            }
        });

        jAnnounceRanksCheckBox.setText("Announce ranks");

        jLabel7.setText("Coins name:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jEnableCoinsCheckBox)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCoinsNameTextField))
                    .addComponent(jEnableRanksCheckBox)
                    .addComponent(jDropCoinsWhenOfflineCheckBox)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCoinsTimerTextField)
                            .addComponent(jAmountOfCoinsToDropWhenOnlineTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jAmountOfCoinsToDropWhenOfflineTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jAnnounceCoinsCheckBox)
                    .addComponent(jAnnounceRanksCheckBox))
                .addGap(0, 530, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jEnableCoinsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jCoinsNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jCoinsTimerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jAmountOfCoinsToDropWhenOnlineTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDropCoinsWhenOfflineCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jAmountOfCoinsToDropWhenOfflineTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jAnnounceCoinsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jEnableRanksCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jAnnounceRanksCheckBox)
                .addGap(0, 144, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Loyalty", jPanel5);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        startButton.setText("start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        saveButton.setText("save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Load settings");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(aboutMenuItem);

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(helpMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startButton)
                            .addComponent(stopButton)
                            .addComponent(saveButton))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        try {
            if(!this.channelTextField.getText().trim().equals("")){
                JTwitchBotMain.setBroadcaster(this.channelTextField.getText().trim());
                JTwitchBotMain.setChannel("#"+this.channelTextField.getText().trim());
                JTwitchBotMain.setTwitterChannel(this.twitterUsernameTextField.getText().trim());
                JTwitchBotMain.setLastFmUserName(this.jLastFmUsernameTextField.getText().trim());
                JTwitchBotMain.setEnableTwitter(this.jEnableTwitterIntegration.isSelected());
                JTwitchBotMain.setEnableLastFm(this.jEnableLastFmIntegrationCheckBox.isSelected());
                JTwitchBotMain.setBanLinks(this.jBanLinks.isSelected());
                JTwitchBotMain.setBanCaps(this.jBanCaps.isSelected());
                JTwitchBotMain.setBanASCII(this.jBanASCII.isSelected());
                JTwitchBotMain.setEnableCoins(this.jEnableCoinsCheckBox.isSelected());
                JTwitchBotMain.setEnableRanks(this.jEnableRanksCheckBox.isSelected());
                JTwitchBotMain.setAnnounceCoins(this.jAnnounceCoinsCheckBox.isSelected());
                JTwitchBotMain.setCoinsWhenOffline(this.jDropCoinsWhenOfflineCheckBox.isSelected());
                JTwitchBotMain.setAnnounceRanks(this.jAnnounceRanksCheckBox.isSelected());
                JTwitchBotMain.setCoinsOnlineTimer(Long.valueOf(this.jCoinsTimerTextField.getText().trim()));
                JTwitchBotMain.setCoinsOfflineTimer(Long.valueOf(this.jCoinsTimerTextField.getText().trim()));
                JTwitchBotMain.setCoinsName(this.jCoinsNameTextField.getText().trim());
                JTwitchBotMain.setAmountOfCoinsWhenOnline(Integer.parseInt(this.jAmountOfCoinsToDropWhenOnlineTextField.getText().trim()));
                JTwitchBotMain.setAmountOfCoinsWhenOffline(Integer.parseInt(this.jAmountOfCoinsToDropWhenOfflineTextField.getText().trim()));
                JTwitchBotMain.startBot();
            }
            else{
                JOptionPane.showMessageDialog(this, "No channel specified", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        try {
            JTwitchBotMain.stopBot();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        //
        saveSettings();
        
    }//GEN-LAST:event_saveButtonActionPerformed

    private void channelTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_channelTextFieldActionPerformed

    private void jBanLinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBanLinksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBanLinksActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        loadSettings();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked

    }//GEN-LAST:event_jMenu2MouseClicked

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed

        JOptionPane.showMessageDialog(this, "DockingBot v0.2 \nby @sszemer on twitter", "About", JOptionPane.PLAIN_MESSAGE);        // TODO add your handling code here:
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "please visit http://www.sszemer.org for help", "Help", JOptionPane.PLAIN_MESSAGE);        // TODO add your handling code here:
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void jEnableAnnouncementsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jEnableAnnouncementsStateChanged
        //change announcementsON in jAnnouncements

    }//GEN-LAST:event_jEnableAnnouncementsStateChanged

    private void jLastFmUsernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLastFmUsernameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLastFmUsernameTextFieldActionPerformed

    private void jCoinsTimerTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCoinsTimerTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCoinsTimerTextFieldActionPerformed

    private void jAnnounceCoinsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAnnounceCoinsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jAnnounceCoinsCheckBoxActionPerformed

    void loadSettings(){
        //System.out.println(Paths.get(".").toAbsolutePath().normalize().toString());
        
        // This will reference one line at a time
        String line = null;
        String lineRead[] = null;

        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = 
                new FileReader(settingsDB);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = 
                new BufferedReader(fileReader);

            while((line = bufferedReader.readLine()) != null) {
                lineRead = line.split("=");
                //System.out.println(lineRead[0]);
                if (lineRead[0].equals("channel")){
                    if(lineRead.length==2){
                        this.channelTextField.setText(lineRead[1]);
                    }
                }else if(lineRead[0].equals("enableTwitter")){
                    if(lineRead.length==2){                        
                        this.jEnableTwitterIntegration.setSelected(Boolean.parseBoolean(lineRead[1]));
                    }
                }else if(lineRead[0].equals("twitterUsername")){
                    if(lineRead.length==2){
                        this.twitterUsernameTextField.setText(lineRead[1].trim());
                    }
                }else if(lineRead[0].equals("enableLastFm")){
                    if(lineRead.length==2){                        
                        this.jEnableLastFmIntegrationCheckBox.setSelected(Boolean.parseBoolean(lineRead[1]));
                    }
                }else if(lineRead[0].equals("lastFmUsername")){
                    if(lineRead.length==2){
                        this.jLastFmUsernameTextField.setText(lineRead[1].trim());
                    }
                }else if(lineRead[0].equals("banLinks")){
                    if(lineRead.length==2){
                        this.jBanLinks.setSelected(Boolean.parseBoolean(lineRead[1].trim()));
                    }
                }else if(lineRead[0].equals("banCaps")){
                    if(lineRead.length==2){
                        this.jBanCaps.setSelected(Boolean.parseBoolean(lineRead[1].trim()));
                    }
                }else if(lineRead[0].equals("banASCII")){
                    if(lineRead.length==2){
                        this.jBanASCII.setSelected(Boolean.parseBoolean(lineRead[1].trim()));
                    }
                }else if(lineRead[0].equals("enableCoins")){
                    if(lineRead.length==2){
                        this.jEnableCoinsCheckBox.setSelected(Boolean.parseBoolean(lineRead[1].trim()));
                    }
                }else if(lineRead[0].equals("announceCoins")){
                    if(lineRead.length==2){
                        this.jAnnounceCoinsCheckBox.setSelected(Boolean.parseBoolean(lineRead[1].trim()));
                    }
                }else if(lineRead[0].equals("enableOfflineCoins")){
                    if(lineRead.length==2){
                        this.jDropCoinsWhenOfflineCheckBox.setSelected(Boolean.parseBoolean(lineRead[1].trim()));
                    }
                }else if(lineRead[0].equals("coinsName")){
                    if(lineRead.length==2){
                        this.jCoinsNameTextField.setText(lineRead[1].trim());
                    }
                }else if(lineRead[0].equals("coinsTimer")){
                    if(lineRead.length==2){
                        this.jCoinsTimerTextField.setText(lineRead[1].trim());
                    }
                }else if(lineRead[0].equals("amountToDropWhenOnline")){
                    if(lineRead.length==2){
                        this.jAmountOfCoinsToDropWhenOnlineTextField.setText(lineRead[1].trim());
                    }
                }else if(lineRead[0].equals("amountToDropWhenOffline")){
                    if(lineRead.length==2){
                        this.jAmountOfCoinsToDropWhenOfflineTextField.setText(lineRead[1].trim());
                    }
                }else if(lineRead[0].equals("enableRanks")){
                    if(lineRead.length==2){
                        this.jEnableRanksCheckBox.setSelected(Boolean.parseBoolean(lineRead[1].trim()));
                    }
                }else if(lineRead[0].equals("announceRanks")){
                    if(lineRead.length==2){
                        this.jAnnounceRanksCheckBox.setSelected(Boolean.parseBoolean(lineRead[1].trim()));
                    }
                }
            }   
            bufferedReader.close(); 
            // Always close files.
            //bufferedReader.close();            
        }
        catch(FileNotFoundException ex) {
            System.out.println("Unable to open file '" + 
                settingsDB + "'");                
        }
        catch(IOException ex) {
            System.out.println("loadSettings Error reading file '" 
                + settingsDB + "'");                   
            // Or we could just do this: 
            ex.printStackTrace();
        }
    }
    
    private void saveSettings(){
                //System.out.println(Paths.get(".").toAbsolutePath().normalize().toString());
        
        // This will reference one line at a time
        String line = null;
        String lineRead[] = null;

        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = 
                new FileReader(settingsDB);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = 
                new BufferedReader(fileReader);

            while((line = bufferedReader.readLine()) != null) {
                lineRead = line.split("=");
                //System.out.println(lineRead[0]);
                if (lineRead[0].equals("channel")){
                    if(lineRead.length==2){
                        replaceSelected("channel" + "=", lineRead[1] ,this.channelTextField.getText().trim());
                    }
                    else if(lineRead.length==1){
                        replaceSelected("channel" + "=", "" ,this.channelTextField.getText().trim());                        
                    }
                } else if (lineRead[0].equals("enableTwitter")){
                    if(lineRead.length==2){
                        replaceSelected("enableTwitter" + "=", lineRead[1] ,String.valueOf(this.jEnableTwitterIntegration.isSelected()));
                    }
                    else if(lineRead.length==1){
                        replaceSelected("enableTwitter" + "=", "" ,String.valueOf(this.jEnableTwitterIntegration.isSelected()));                        
                    }
                } else if (lineRead[0].equals("twitterUsername")){
                    if(lineRead.length==2){
                        replaceSelected("twitterUsername" + "=", lineRead[1] ,this.twitterUsernameTextField.getText().trim());
                    }
                    else if(lineRead.length==1){
                        replaceSelected("twitterUsername" + "=", "" ,this.twitterUsernameTextField.getText().trim());                        
                    }
                } else if (lineRead[0].equals("enableLastFm")){
                    if(lineRead.length==2){
                        replaceSelected("enableLastFm" + "=", lineRead[1] ,String.valueOf(this.jEnableLastFmIntegrationCheckBox.isSelected()));
                    }
                    else if(lineRead.length==1){
                        replaceSelected("enableLastFm" + "=", "" ,String.valueOf(this.jEnableLastFmIntegrationCheckBox.isSelected()));                        
                    }
                } else if (lineRead[0].equals("lastFmUsername")){
                    if(lineRead.length==2){
                        replaceSelected("lastFmUsername" + "=", lineRead[1] ,this.jLastFmUsernameTextField.getText().trim());
                    }
                    else if(lineRead.length==1){
                        replaceSelected("lastFmUsername" + "=", "" ,this.jLastFmUsernameTextField.getText().trim());                        
                    }
                } else if (lineRead[0].equals("banLinks")){
                    if(lineRead.length==2){
                        replaceSelected("banLinks" + "=", lineRead[1] ,String.valueOf(this.jBanLinks.isSelected()));
                    }
                    else if(lineRead.length==1){
                        replaceSelected("banLinks" + "=", "" ,String.valueOf(this.jBanLinks.isSelected()));                        
                    }
                } else if (lineRead[0].equals("banCaps")){
                    if(lineRead.length==2){
                        replaceSelected("banCaps" + "=", lineRead[1] ,String.valueOf(this.jBanCaps.isSelected()));
                    }
                    else if(lineRead.length==1){
                        replaceSelected("banCaps" + "=", "" ,String.valueOf(this.jBanCaps.isSelected()));                        
                    }
                } else if (lineRead[0].equals("banASCII")){
                    if(lineRead.length==2){
                        replaceSelected("banASCII" + "=", lineRead[1] ,String.valueOf(this.jBanASCII.isSelected()));
                    }
                    else if(lineRead.length==1){
                        replaceSelected("banASCII" + "=", "" ,String.valueOf(this.jBanASCII.isSelected()));                        
                    }
                } else if (lineRead[0].equals("enableCoins")){
                    if(lineRead.length==2){
                        replaceSelected("enableCoins" + "=", lineRead[1] ,String.valueOf(this.jEnableCoinsCheckBox.isSelected()));
                    }
                    else if(lineRead.length==1){
                        replaceSelected("enableCoins" + "=", "" ,String.valueOf(this.jEnableCoinsCheckBox.isSelected()));                        
                    }
                } else if (lineRead[0].equals("enableOfflineCoins")){
                    if(lineRead.length==2){
                        replaceSelected("enableOfflineCoins" + "=", lineRead[1] ,String.valueOf(this.jDropCoinsWhenOfflineCheckBox.isSelected()));
                    }
                    else if(lineRead.length==1){
                        replaceSelected("enableOfflineCoins" + "=", "" ,String.valueOf(this.jDropCoinsWhenOfflineCheckBox.isSelected()));                        
                    }
                }  else if (lineRead[0].equals("announceCoins")){
                    if(lineRead.length==2){
                        replaceSelected("announceCoins" + "=", lineRead[1] ,String.valueOf(this.jAnnounceCoinsCheckBox.isSelected()));
                    }
                    else if(lineRead.length==1){
                        replaceSelected("announceCoins" + "=", "" ,String.valueOf(this.jAnnounceCoinsCheckBox.isSelected()));                        
                    }
                } else if (lineRead[0].equals("enableRanks")){
                    if(lineRead.length==2){
                        replaceSelected("enableRanks" + "=", lineRead[1] ,String.valueOf(this.jEnableRanksCheckBox.isSelected()));
                    }
                    else if(lineRead.length==1){
                        replaceSelected("enableRanks" + "=", "" ,String.valueOf(this.jEnableRanksCheckBox.isSelected()));                        
                    }
                }  else if (lineRead[0].equals("announceRanks")){
                    if(lineRead.length==2){
                        replaceSelected("announceRanks" + "=", lineRead[1] ,String.valueOf(this.jAnnounceRanksCheckBox.isSelected()));
                    }
                    else if(lineRead.length==1){
                        replaceSelected("announceRanks" + "=", "" ,String.valueOf(this.jAnnounceRanksCheckBox.isSelected()));                        
                    }
                } else if (lineRead[0].equals("coinsName")){
                    if(lineRead.length==2){
                        replaceSelected("coinsName" + "=", lineRead[1] ,this.jCoinsNameTextField.getText().trim());
                    }
                    else if(lineRead.length==1){
                        replaceSelected("coinsName" + "=", "" ,this.jCoinsNameTextField.getText().trim());                        
                    }
                } else if (lineRead[0].equals("coinsTimer")){
                    if(lineRead.length==2){
                        replaceSelected("coinsTimer" + "=", lineRead[1] ,this.jCoinsTimerTextField.getText().trim());
                    }
                    else if(lineRead.length==1){
                        replaceSelected("coinsTimer" + "=", "" ,this.jCoinsTimerTextField.getText().trim());                        
                    }
                } else if (lineRead[0].equals("amountToDropWhenOnline")){
                    if(lineRead.length==2){
                        replaceSelected("amountToDropWhenOnline" + "=", lineRead[1] ,this.jAmountOfCoinsToDropWhenOnlineTextField.getText().trim());
                    }
                    else if(lineRead.length==1){
                        replaceSelected("amountToDropWhenOnline" + "=", "" ,this.jAmountOfCoinsToDropWhenOnlineTextField.getText().trim());                        
                    }
                } else if (lineRead[0].equals("amountToDropWhenOffline")){
                    if(lineRead.length==2){
                        replaceSelected("amountToDropWhenOffline" + "=", lineRead[1] ,this.jAmountOfCoinsToDropWhenOfflineTextField.getText().trim());
                    }
                    else if(lineRead.length==1){
                        replaceSelected("amountToDropWhenOffline" + "=", "" ,this.jAmountOfCoinsToDropWhenOfflineTextField.getText().trim());                        
                    }
                }
            }   
            bufferedReader.close(); 
            // Always close files.
            //bufferedReader.close();            
        }
        catch(FileNotFoundException ex) {
            System.out.println("Unable to open file '" + 
                settingsDB + "'");                
        }
        catch(IOException ex) {
            System.out.println("addCoins Error reading file '" 
                + settingsDB + "'");                   
            // Or we could just do this: 
            ex.printStackTrace();
        }
    }
    
    public void replaceSelected(String settingName, String oldSetting, String newSetting) {
        try {
            // input the file content to the String "input"
            BufferedReader file = new BufferedReader(new FileReader(settingsDB));
            String line;
            String input = "";

            while ((line = file.readLine()) != null) input += line + '\n'; //this needs improvement

            file.close();

            //System.out.println(input); // check that it's inputted right

            input = input.replace(settingName + String.valueOf(oldSetting), settingName + String.valueOf(newSetting)); 

            // check if the new input is right
            //System.out.println("----------------------------------"  + '\n' + input);

            // write the new String with the replaced line OVER the same file
            FileOutputStream fileOut = new FileOutputStream(settingsDB);
            fileOut.write(input.getBytes());
            fileOut.close();

        } catch (IOException e) {
            System.out.println("Problem reading file.");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JTwitchBotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JTwitchBotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JTwitchBotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JTwitchBotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JTwitchBotGUI().setVisible(true);
            }
        });
    }
    
    public JLabel getStatusLabel(){
        return this.jStatusLabel;
    }
    
    public JCheckBox getEnableAnnouncements(){
        return this.jEnableAnnouncements;
    }
    
    public static JTwitchBotGUI getInstance(){
        if (instance == null){
            instance = new JTwitchBotGUI();            
        }
        return instance;
    }
    
    private static JTwitchBotGUI instance;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JTextField channelTextField;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JTextField jAmountOfCoinsToDropWhenOfflineTextField;
    private javax.swing.JTextField jAmountOfCoinsToDropWhenOnlineTextField;
    private javax.swing.JCheckBox jAnnounceCoinsCheckBox;
    private javax.swing.JCheckBox jAnnounceRanksCheckBox;
    private javax.swing.JCheckBox jBanASCII;
    private javax.swing.JCheckBox jBanCaps;
    private javax.swing.JCheckBox jBanLinks;
    private javax.swing.JTextField jCoinsNameTextField;
    private javax.swing.JTextField jCoinsTimerTextField;
    private javax.swing.JCheckBox jDropCoinsWhenOfflineCheckBox;
    private javax.swing.JCheckBox jEnableAnnouncements;
    private javax.swing.JCheckBox jEnableCoinsCheckBox;
    private javax.swing.JCheckBox jEnableFollowerNotifications;
    private javax.swing.JCheckBox jEnableHostingNotifications;
    private javax.swing.JCheckBox jEnableLastFmIntegrationCheckBox;
    private javax.swing.JCheckBox jEnablePatreonSubNotifications;
    private javax.swing.JCheckBox jEnableRanksCheckBox;
    private javax.swing.JCheckBox jEnableSubscriberNotifications;
    private javax.swing.JCheckBox jEnableTwitterIntegration;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jLastFmUsernameTextField;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jStatusLabel;
    private javax.swing.JLabel jStatusStaticLabel;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JTextField twitterUsernameTextField;
    // End of variables declaration//GEN-END:variables
}
